{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","class","src","alt","className","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAkCeA,MA9Bf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACA,sBAAKC,MAAQ,QAAb,UACI,qBAAKC,IAAOH,EAAQI,IAAKN,EAAOA,MAAOA,IACvC,sBAAKO,UAAY,aAAjB,UACI,oBAAIA,UAAY,cAAhB,SAA+BP,IAC/B,oBAAIO,UAAY,aAAhB,SAA8BR,IAC9B,oBAAIQ,UAAU,SAAd,SACKJ,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAkBH,UAAU,gBAA5B,SACKE,GADMC,QAKnB,oBAAGH,UAAY,gBAAf,UAAgCN,EAAQU,MAAM,EAAG,KAAjD,gBC+BGC,E,4MA3CbC,MAAQ,CACNC,WAAY,EACZC,OAAS,I,EAEXC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGCJ,EAHD,EAERK,KACEA,KAAOL,OAGX,EAAKM,SAAS,CAACN,SAASD,WAAY,IAN1B,2C,uDAQZ,WACCQ,KAAKN,c,oBAEN,WACE,MAA8BM,KAAKT,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACG,yBAASR,UAAY,YAArB,SACEO,EACD,qBAAKP,UAAY,SAAjB,SACE,sBAAMA,UAAY,cAAlB,0BAGD,qBAAKA,UAAY,SAAjB,SACIQ,EAAOP,KAAI,SAAAe,GAAK,OACnB,aADwB,CACvB,EAAD,CAEEzB,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,QANRoB,EAAMzB,e,GA5BN2B,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAa1Bb,M","file":"static/js/main.10ed8ee9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (\r\n    <div class = \"movie\">\r\n        <img src = {poster} alt={title} title={title}/>\r\n        <div className = \"movie_data\">\r\n            <h3 className = \"movie_title\">{title}</h3>\r\n            <h5 className = \"movie_year\">{year}</h5>\r\n            <ul className=\"genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key = {index} className=\"genres_genres\">\r\n                        {genre}\r\n                        </li> \r\n                ))}\r\n            </ul>\r\n            <p className = \"movie_summary\">{summary.slice(0, 140)}...</p>\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import './App.css';\nimport React from 'react';\nimport axios from \"axios\";\nimport Movie from './Movie';\n\nclass App extends React.Component{\n  state = {\n    isLoading : true,\n    movies : []\n  }\n  getMovies = async () =>{\n    const {\n      data : {\n        data :{movies}\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({movies , isLoading : false});\n  }\n  componentDidMount(){\n   this.getMovies(); \n  }\n  render(){\n    const { isLoading, movies } = this.state;\n    return(\n       <section className = \"container\">\n        {isLoading ?(\n        <div className = \"loader\">\n          <span className = \"loader_text\">Loading...</span>\n        </div>\n        ) : (\n         <div className = \"movies\">\n           { movies.map(movie => (//map함수는 반드시 무언가를 return해줘야한다. =>이면 return의 의미가 포함되어있는 것이다.\n          <Movie \n            key ={movie.id}\n            id={movie.id} \n            year={movie.year} \n            title={movie.title} \n            summary={movie.summary} \n            poster={movie.medium_cover_image}\n            genres={movie.genres}\n           />\n            )) }\n         </div>\n        )}\n       </section>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//<App/> : react의 component(컴포넌트) not HTML\n//component(컴포넌트) : HTML을 반환하는 함수\n//jsx : JS를 확장한 문법, JS안의 html, JS의 모든 기능을 포함 react에 특화된 지식\n//구 버전에서는 react application이 하나의 component만을 rendering해야 했었다. 하지만 지금은 두개의 컴포넌트도 랜더링이 가능\n//(단, <React.StrictMode></React.StrictMode>안에 포함되어있어야함)\n//하나의 컴포넌트로만 랜더링하는 경우에 다른 컴포넌트는 랜더링된 컴포넌트 안에서 작성되어야한다.\n//\nreportWebVitals();\n"],"sourceRoot":""}